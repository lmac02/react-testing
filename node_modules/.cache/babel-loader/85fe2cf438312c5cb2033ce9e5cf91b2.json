{"ast":null,"code":"'use strict';\n\nvar assign = require('lodash/assign');\n\nvar base = require('../mixins/base');\n/**\n * Creates an Order instance.\n *\n * @param {Shopify} shopify Reference to the Shopify instance\n * @constructor\n * @public\n */\n\n\nfunction Order(shopify) {\n  this.shopify = shopify;\n  this.name = 'orders';\n  this.key = 'order';\n}\n\nassign(Order.prototype, base);\n/**\n * Closes an order.\n *\n * @param {Number} id Order ID\n * @return {Promise} Promise that resolves with the result\n * @public\n */\n\nOrder.prototype.close = function close(id) {\n  var _this = this;\n\n  var url = this.buildUrl(\"\".concat(id, \"/close\"));\n  return this.shopify.request(url, 'POST', undefined, {}).then(function (body) {\n    return body[_this.key];\n  });\n};\n/**\n * Re-opens a closed order.\n *\n * @param {Number} id Order ID\n * @return {Promise} Promise that resolves with the result\n * @public\n */\n\n\nOrder.prototype.open = function open(id) {\n  var _this2 = this;\n\n  var url = this.buildUrl(\"\".concat(id, \"/open\"));\n  return this.shopify.request(url, 'POST', undefined, {}).then(function (body) {\n    return body[_this2.key];\n  });\n};\n/**\n * Cancels an order.\n *\n * @param {Number} id Order ID\n * @params {Object} [params] Cancel options\n * @return {Promise} Promise that resolves with the result\n * @public\n */\n\n\nOrder.prototype.cancel = function cancel(id, params) {\n  var _this3 = this;\n\n  var url = this.buildUrl(\"\".concat(id, \"/cancel\"));\n  return this.shopify.request(url, 'POST', undefined, params).then(function (body) {\n    return body[_this3.key];\n  });\n};\n\nmodule.exports = Order;","map":null,"metadata":{},"sourceType":"script"}
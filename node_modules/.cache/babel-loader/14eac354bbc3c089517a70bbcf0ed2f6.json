{"ast":null,"code":"'use strict';\n\nvar assign = require('lodash/assign');\n\nvar qs = require('qs');\n/**\n * This provides methods used by resources that have no relationships with\n * other resources. It's not meant to be used directly.\n *\n * @mixin\n */\n\n\nvar base = {\n  /**\n   * Counts the number of records.\n   *\n   * @param {Object} [params] Query parameters\n   * @return {Promise} Promise that resolves with the result\n   * @public\n   */\n  count: function count(params) {\n    var key = 'count';\n    var url = this.buildUrl(key, params);\n    return this.shopify.request(url, 'GET', key);\n  },\n\n  /**\n   * Creates a new record.\n   *\n   * @param {Object} params Record properties\n   * @return {Promise} Promise that resolves with the result\n   * @public\n   */\n  create: function create(params) {\n    var url = this.buildUrl();\n    return this.shopify.request(url, 'POST', this.key, params);\n  },\n\n  /**\n   * Deletes a record.\n   *\n   * @param {Number} id Record ID\n   * @return {Promise} Promise that resolves with the result\n   * @public\n   */\n  delete: function _delete(id) {\n    var url = this.buildUrl(id);\n    return this.shopify.request(url, 'DELETE');\n  },\n\n  /**\n   * Gets a single record by its ID.\n   *\n   * @param {Number} id Record ID\n   * @param {Object} [params] Query parameters\n   * @return {Promise} Promise that resolves with the result\n   * @public\n   */\n  get: function get(id, params) {\n    var url = this.buildUrl(id, params);\n    return this.shopify.request(url, 'GET', this.key);\n  },\n\n  /**\n   * Gets a list of records.\n   *\n   * @param {Object} params Query parameters\n   * @return {Promise} Promise that resolves with the result\n   * @public\n   */\n  list: function list(params) {\n    var url = this.buildUrl(undefined, params);\n    return this.shopify.request(url, 'GET', this.name);\n  },\n\n  /**\n   * Updates a record.\n   *\n   * @param {Number} id Record ID\n   * @param {Object} params Record properties\n   * @return {Promise} Promise that resolves with the result\n   * @public\n   */\n  update: function update(id, params) {\n    var url = this.buildUrl(id);\n    return this.shopify.request(url, 'PUT', this.key, params);\n  },\n\n  /**\n   * Builds the request URL.\n   *\n   * @param {Number|String} [id] Record ID\n   * @param {Object} [query] Query parameters\n   * @return {Object} URL object\n   * @private\n   */\n  buildUrl: function buildUrl(id, query) {\n    id || id === 0 || (id = '');\n    var path = \"/admin/\".concat(this.name, \"/\").concat(id).replace(/\\/+/g, '/').replace(/\\/$/, '');\n    path += '.json';\n    if (query) path += '?' + qs.stringify(query, {\n      arrayFormat: 'brackets'\n    });\n    return assign({\n      path: path\n    }, this.shopify.baseUrl);\n  }\n};\nmodule.exports = base;","map":null,"metadata":{},"sourceType":"script"}
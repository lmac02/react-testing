{"ast":null,"code":"'use strict';\n\nvar assign = require('lodash/assign');\n\nvar qs = require('qs');\n/**\n * Creates a FulfillmentEvent instance.\n *\n * @param {Shopify} shopify Reference to the Shopify instance\n * @constructor\n * @public\n */\n\n\nfunction FulfillmentEvent(shopify) {\n  this.shopify = shopify;\n  this.parentName = 'fulfillments';\n  this.key = 'fulfillment_event';\n  this.name = 'events';\n}\n/**\n * Gets a list of fulfillment events for a fulfillment.\n *\n * @param {Number} orderId Order ID\n * @param {Number} fulfillmentId Fulfillment ID\n * @param {Object} [params] Query parameters\n * @return {Promise} Promise that resolves with the result\n * @public\n */\n\n\nFulfillmentEvent.prototype.list = function list(orderId, fulfillmentId, params) {\n  var url = this.buildUrl(orderId, fulfillmentId, undefined, params);\n  return this.shopify.request(url, 'GET', \"\".concat(this.key, \"s\"));\n};\n/**\n * Gets a single fulfillment event by its ID.\n *\n * @param {Number} orderId Order ID\n * @param {Number} fulfillmentId Fulfillment ID\n * @param {Number} id Fulfillment event ID\n * @return {Promise} Promise that resolves with the result\n * @public\n */\n\n\nFulfillmentEvent.prototype.get = function get(orderId, fulfillmentId, id) {\n  var url = this.buildUrl(orderId, fulfillmentId, id);\n  return this.shopify.request(url, 'GET', this.key);\n};\n/**\n * Creates a fulfillment event.\n *\n * @param {Number} orderId Order ID\n * @param {Number} fulfillmentId Fulfillment ID\n * @param {Object} params Fulfillment event properties\n * @return {Promise} Promise that resolves with the result\n * @public\n */\n\n\nFulfillmentEvent.prototype.create = function create(orderId, fulfillmentId, params) {\n  var _this = this;\n\n  var url = this.buildUrl(orderId, fulfillmentId);\n  return this.shopify.request(url, 'POST', undefined, {\n    event: params\n  }).then(function (body) {\n    return body[_this.key];\n  });\n};\n/**\n * Updates a fulfillment event.\n *\n * @param {Number} orderId Order ID\n * @param {Number} fulfillmentId Fulfillment ID\n * @param {Number} id Fulfillment event ID\n * @param {Object} params Fulfillment event properties\n * @return {Promise} Promise that resolves with the result\n * @public\n */\n\n\nFulfillmentEvent.prototype.update = function update(orderId, fulfillmentId, id, params) {\n  var _this2 = this;\n\n  var url = this.buildUrl(orderId, fulfillmentId, id);\n  return this.shopify.request(url, 'PUT', undefined, {\n    event: params\n  }).then(function (body) {\n    return body[_this2.key];\n  });\n};\n/**\n * Deletes a fulfillment event.\n *\n * @param {Number} orderId Order ID\n * @param {Number} fulfillmentId Fulfillment ID\n * @param {Number} id Fulfillment event ID\n * @return {Promise} Promise that resolves with the result\n * @public\n */\n\n\nFulfillmentEvent.prototype.delete = function remove(orderId, fulfillmentId, id) {\n  var url = this.buildUrl(orderId, fulfillmentId, id);\n  return this.shopify.request(url, 'DELETE');\n};\n/**\n * Builds the request URL.\n *\n * @param {Number} orderId Order ID\n * @param {Number} fulfillmentId Fulfillment ID\n * @param {Number} id Fulfillment event ID\n * @param {Object} [params] Query parameters\n * @return {Object} URL object\n * @private\n */\n\n\nFulfillmentEvent.prototype.buildUrl = function buildUrl(orderId, fulfillmentId, id, query) {\n  id || id === 0 || (id = '');\n  var path = ['/admin/orders', orderId, this.parentName, fulfillmentId, this.name, id].join('/');\n  path = path.replace(/\\/+/g, '/').replace(/\\/$/, '') + '.json';\n  if (query) path += '?' + qs.stringify(query, {\n    arrayFormat: 'brackets'\n  });\n  return assign({\n    path: path\n  }, this.shopify.baseUrl);\n};\n\nmodule.exports = FulfillmentEvent;","map":null,"metadata":{},"sourceType":"script"}
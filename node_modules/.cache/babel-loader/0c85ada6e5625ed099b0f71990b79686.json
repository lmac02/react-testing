{"ast":null,"code":"'use strict';\n\nvar _defineProperty = require(\"C:\\\\Users\\\\fusi0\\\\OneDrive\\\\Documents\\\\nodejs-test\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/defineProperty\");\n\nvar camelCase = require('lodash/camelCase');\n\nvar transform = require('lodash/transform');\n\nvar defaults = require('lodash/defaults');\n\nvar assign = require('lodash/assign');\n\nvar EventEmitter = require('events');\n\nvar stopcock = require('stopcock');\n\nvar path = require('path');\n\nvar got = require('got');\n\nvar fs = require('fs');\n\nvar pkg = require('./package');\n/**\n * Creates a Shopify instance.\n *\n * @param {Object} options Configuration options\n * @param {String} options.shopName The name of the shop\n * @param {String} options.apiKey The API Key\n * @param {String} options.password The private app password\n * @param {String} options.accessToken The persistent OAuth public app token\n * @param {Boolean|Object} [options.autoLimit] Limits the request rate\n * @param {Number} [options.timeout] The request timeout\n * @constructor\n * @public\n */\n\n\nfunction Shopify(options) {\n  if (!(this instanceof Shopify)) return new Shopify(options);\n\n  if (!options || !options.shopName || !options.accessToken && (!options.apiKey || !options.password) || options.accessToken && (options.apiKey || options.password)) {\n    throw new Error('Missing or invalid options');\n  }\n\n  EventEmitter.call(this);\n  this.options = defaults(options, {\n    timeout: 60000\n  }); //\n  // API call limits, updated with each request.\n  //\n\n  this.callLimits = {\n    remaining: undefined,\n    current: undefined,\n    max: undefined\n  };\n  this.baseUrl = {\n    auth: !options.accessToken && \"\".concat(options.apiKey, \":\").concat(options.password),\n    hostname: !options.shopName.endsWith('.myshopify.com') ? \"\".concat(options.shopName, \".myshopify.com\") : options.shopName,\n    protocol: 'https:'\n  };\n\n  if (options.autoLimit) {\n    var conf = transform(options.autoLimit, function (result, value, key) {\n      if (key === 'calls') key = 'limit';\n      result[key] = value;\n    }, {\n      bucketSize: 35\n    });\n    this.request = stopcock(this.request, conf);\n  }\n}\n\nObject.setPrototypeOf(Shopify.prototype, EventEmitter.prototype);\n/**\n * Updates API call limits.\n *\n * @param {String} header X-Shopify-Shop-Api-Call-Limit header\n * @private\n */\n\nShopify.prototype.updateLimits = function updateLimits(header) {\n  if (!header) return;\n  var limits = header.split('/').map(Number);\n  var callLimits = this.callLimits;\n  callLimits.remaining = limits[1] - limits[0];\n  callLimits.current = limits[0];\n  callLimits.max = limits[1];\n  this.emit('callLimits', callLimits);\n};\n/**\n * Sends a request to a Shopify API endpoint.\n *\n * @param {Object} url URL object\n * @param {String} method HTTP method\n * @param {String} [key] Key name to use for req/res body\n * @param {Object} [params] Request body\n * @return {Promise}\n * @private\n */\n\n\nShopify.prototype.request = function request(url, method, key, params) {\n  var _this = this;\n\n  var options = assign({\n    headers: {\n      'User-Agent': \"\".concat(pkg.name, \"/\").concat(pkg.version)\n    },\n    timeout: this.options.timeout,\n    json: true,\n    retries: 0,\n    method: method\n  }, url);\n\n  if (this.options.accessToken) {\n    options.headers['X-Shopify-Access-Token'] = this.options.accessToken;\n  }\n\n  if (params) {\n    var body = key ? _defineProperty({}, key, params) : params;\n    options.headers['Content-Type'] = 'application/json';\n    options.body = body;\n  }\n\n  return got(options).then(function (res) {\n    var body = res.body;\n\n    _this.updateLimits(res.headers['x-shopify-shop-api-call-limit']);\n\n    if (key) return body[key];\n    return body || {};\n  }, function (err) {\n    _this.updateLimits(err.response && err.response.headers['x-shopify-shop-api-call-limit']);\n\n    return Promise.reject(err);\n  });\n}; //\n// Require and instantiate the resources lazily.\n//\n\n\nfs.readdirSync(path.join(__dirname, 'resources')).forEach(function (name) {\n  var prop = camelCase(name.slice(0, -3));\n  Object.defineProperty(Shopify.prototype, prop, {\n    get: function get() {\n      var resource = require(\"./resources/\".concat(name));\n\n      return Object.defineProperty(this, prop, {\n        value: new resource(this)\n      })[prop];\n    },\n    set: function set(value) {\n      return Object.defineProperty(this, prop, {\n        value: value\n      })[prop];\n    }\n  });\n});\nmodule.exports = Shopify;","map":null,"metadata":{},"sourceType":"script"}
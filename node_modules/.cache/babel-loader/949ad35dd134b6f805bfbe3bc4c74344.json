{"ast":null,"code":"'use strict';\n\nvar assign = require('lodash/assign');\n\nvar pick = require('lodash/pick');\n\nvar baseChild = require('../mixins/base-child');\n/**\n * Creates an CustomerAddress instance.\n *\n * @param {Shopify} shopify Reference to the Shopify instance\n * @constructor\n * @public\n */\n\n\nfunction CustomerAddress(shopify) {\n  this.shopify = shopify;\n  this.parentName = 'customers';\n  this.name = 'addresses';\n  this.key = 'customer_address';\n}\n\nassign(CustomerAddress.prototype, pick(baseChild, ['buildUrl', 'delete', 'get']));\n/**\n * Gets a list of addresses for a customer.\n *\n * @param {Number} customerId Customer ID\n * @param {Object} [params] Query parameters\n * @return {Promise} Promise that resolves with the result\n * @public\n */\n\nCustomerAddress.prototype.list = function list(customerId, params) {\n  var url = this.buildUrl(customerId, undefined, params);\n  return this.shopify.request(url, 'GET', this.name);\n};\n/**\n * Creates a new address for a customer.\n *\n * @param {Number} customerId Customer ID\n * @param {Object} params Address properties\n * @return {Promise} Promise that resolves with the result\n * @public\n */\n\n\nCustomerAddress.prototype.create = function create(customerId, params) {\n  var _this = this;\n\n  var url = this.buildUrl(customerId);\n  return this.shopify.request(url, 'POST', undefined, {\n    address: params\n  }).then(function (body) {\n    return body[_this.key];\n  });\n};\n/**\n * Updates a customer address.\n *\n * @param {Number} customerId Customer ID\n * @param {Number} id Address ID\n * @param {Object} params Address properties\n * @return {Promise} Promise that resolves with the result\n * @public\n */\n\n\nCustomerAddress.prototype.update = function update(customerId, id, params) {\n  var _this2 = this;\n\n  var url = this.buildUrl(customerId, id);\n  return this.shopify.request(url, 'PUT', undefined, {\n    address: params\n  }).then(function (body) {\n    return body[_this2.key];\n  });\n};\n/**\n * Performs bulk operations against a number of addresses.\n *\n * @param {Number} customerId Customer ID\n * @param {Object} params Query parameters\n * @return {Promise} Promise that resolves with the result\n * @public\n */\n\n\nCustomerAddress.prototype.set = function set(customerId, params) {\n  var url = this.buildUrl(customerId, 'set', params);\n  return this.shopify.request(url, 'PUT');\n};\n/**\n * Sets default address for a customer.\n *\n * @param {Number} customerId Customer ID\n * @param {Number} id Address ID\n * @return {Promise} Promise that resolves with the result\n * @public\n */\n\n\nCustomerAddress.prototype.default = function defaultAddress(customerId, id) {\n  var url = this.buildUrl(customerId, \"\".concat(id, \"/default\"));\n  return this.shopify.request(url, 'PUT', this.key);\n};\n\nmodule.exports = CustomerAddress;","map":null,"metadata":{},"sourceType":"script"}
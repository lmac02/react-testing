"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var url_1 = require("url");
var node_mocks_http_1 = tslib_1.__importDefault(require("node-mocks-http"));
var stream_1 = tslib_1.__importDefault(require("stream"));
var koa_1 = tslib_1.__importDefault(require("koa"));
var create_mock_cookies_1 = tslib_1.__importDefault(require("../create-mock-cookies"));
function createContext(options) {
    if (options === void 0) { options = {}; }
    var app = new koa_1.default();
    var cookies = options.cookies, method = options.method, statusCode = options.statusCode, session = options.session, requestBody = options.requestBody, _a = options.url, url = _a === void 0 ? '' : _a, _b = options.host, host = _b === void 0 ? 'test.com' : _b, _c = options.encrypted, encrypted = _c === void 0 ? false : _c, _d = options.throw, throwFn = _d === void 0 ? jest.fn() : _d, _e = options.redirect, redirect = _e === void 0 ? jest.fn() : _e, _f = options.headers, headers = _f === void 0 ? {} : _f, _g = options.state, state = _g === void 0 ? {} : _g, _h = options.customProperties, customProperties = _h === void 0 ? {} : _h;
    var extensions = tslib_1.__assign({}, customProperties, { throw: throwFn, session: session,
        redirect: redirect,
        state: state });
    var protocolFallback = encrypted ? 'https' : 'http';
    var urlObject = new url_1.URL(url, protocolFallback + "://" + host);
    var req = node_mocks_http_1.default.createRequest({
        url: urlObject.toString(),
        method: method,
        statusCode: statusCode,
        session: session,
        headers: tslib_1.__assign({ 
            // Koa determines protocol based on the `Host` header.
            Host: urlObject.host }, headers),
    });
    // Some functions we call in the implementations will perform checks for `req.encrypted`, which delegates to the socket.
    // MockRequest doesn't set a fake socket itself, so we create one here.
    req.socket = new stream_1.default.Duplex();
    Object.defineProperty(req.socket, 'encrypted', {
        writable: false,
        value: urlObject.protocol === 'https:',
    });
    var res = node_mocks_http_1.default.createResponse();
    // Koa sets a default status code of 404, not the node default of 200
    // https://github.com/koajs/koa/blob/master/docs/api/response.md#responsestatus
    res.statusCode = 404;
    // This is to get around an odd behavior in the `cookies` library, where if `res.set` is defined, it will use an internal
    // node function to set headers, which results in them being set in the wrong place.
    // eslint-disable-next-line no-undefined
    res.set = undefined;
    var context = app.createContext(req, res);
    Object.assign(context, extensions);
    context.cookies = create_mock_cookies_1.default(cookies);
    // ctx.request.body is a common enough custom property for middleware to add that it's handy to just support it by default
    context.request.body = requestBody;
    return context;
}
exports.default = createContext;

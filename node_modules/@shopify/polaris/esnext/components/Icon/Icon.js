import * as React from 'react';
import { classNames, variationName } from '@shopify/react-utilities/styles';
import { withAppProvider } from '../AppProvider';
import { add, alert, arrowDown, arrowLeft, arrowRight, arrowUp, arrowUpDown, calendar, cancel, cancelSmall, caretDown, caretUp, checkmark, chevronDown, chevronLeft, chevronRight, chevronUp, circleCancel, circleChevronDown, circleChevronLeft, circleChevronRight, circleChevronUp, circleInformation, circlePlus, circlePlusOutline, conversation, deleteIcon, disable, dispute, duplicate, embed, exportIcon, external, help, home, horizontalDots, importIcon, logOut, notes, notification, onlineStore, orders, print, products, profile, refresh, risk, save, search, subtract, view, } from '../../icons';
import * as styles from './Icon.scss';
export const BUNDLED_ICONS = {
    add,
    alert,
    arrowDown,
    arrowLeft,
    arrowRight,
    arrowUp,
    arrowUpDown,
    calendar,
    cancel,
    cancelSmall,
    caretDown,
    caretUp,
    checkmark,
    chevronDown,
    chevronLeft,
    chevronRight,
    chevronUp,
    circleCancel,
    circleChevronDown,
    circleChevronLeft,
    circleChevronRight,
    circleChevronUp,
    circleInformation,
    circlePlus,
    circlePlusOutline,
    conversation,
    delete: deleteIcon,
    disable,
    dispute,
    duplicate,
    embed,
    export: exportIcon,
    external,
    help,
    home,
    horizontalDots,
    import: importIcon,
    logOut,
    notes,
    notification,
    onlineStore,
    orders,
    print,
    products,
    profile,
    refresh,
    risk,
    save,
    search,
    subtract,
    view,
};
const COLORS_WITH_BACKDROPS = [
    'teal',
    'tealDark',
    'greenDark',
    'redDark',
    'yellowDark',
    'ink',
    'inkLighter',
];
function Icon({ source, color, backdrop, accessibilityLabel, polaris: { intl }, }) {
    if (color && backdrop && COLORS_WITH_BACKDROPS.indexOf(color) < 0) {
        // eslint-disable-next-line no-console
        console.warn(intl.translate('Polaris.Icon.backdropWarning', {
            color,
            colorsWithBackDrops: COLORS_WITH_BACKDROPS.join(', '),
        }));
    }
    const className = classNames(styles.Icon, color && styles[variationName('color', color)], color && color !== 'white' && styles.isColored, backdrop && styles.hasBackdrop);
    let contentMarkup;
    if (source === 'placeholder') {
        contentMarkup = <div className={styles.Placeholder}/>;
    }
    else if (React.isValidElement(source)) {
        contentMarkup = source;
    }
    else {
        const iconSource = typeof source === 'string' && isBundledIcon(source)
            ? BUNDLED_ICONS[source]
            : source;
        contentMarkup = iconSource &&
            iconSource.viewBox &&
            iconSource.body && (<svg className={styles.Svg} viewBox={iconSource.viewBox} dangerouslySetInnerHTML={{ __html: iconSource.body }} focusable="false" aria-hidden="true"/>);
    }
    return (<span className={className} aria-label={accessibilityLabel}>
      {contentMarkup}
    </span>);
}
function isBundledIcon(key) {
    return Object.keys(BUNDLED_ICONS).includes(key);
}
export default withAppProvider()(Icon);
